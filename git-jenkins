#!/bin/bash

# 集成到Git子命令
# Timothy<ygmpkk@gmail.com>

# Checks
command -v jsawk >/dev/null 2>&1 || { echo "jsawk is required. Install from brew or go to https://github.com/micha/jsawk/" >&2; exit -1; }
command -v perl >/dev/null 2>&1 || { echo "perl is required." >&2; exit -1; }

# 加载环境变量
test -z ${JENKINS_URL} && export JENKINS_URL=$(git config jenkins.url)
test -z ${JENKINS_TOKEN} && export JENKINS_TOKEN=$(git config jenkins.token)
test -z ${JENKINS_LOGIN} && export JENKINS_LOGIN=$(git config jenkins.login)
# test -z ${JENKINS_CONFIG} && export JENKINS_CONFIG=$(git config jenkins.config)

if test -z jenkins; then
    echo "JENKINS_URL not defined. -> export JENKINS_URL=\"http:\/\/xxx\""
    exit -1
fi

# Configuration
jenkinsUrl=${JENKINS_URL}
token=${JENKINS_TOKEN}
login=${JENKINS_LOGIN}
#config=${JENKINS_CONFIG}
repo=$(git config remote.origin.url)
branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

usage() {
    echo "usage: git jenkins <subcommand> [-v]"
    echo
    echo "Available subcommands are:"
    echo -e "   list\t\t\t\tList jenkins jobs"
    echo -e "   credentials <domain>\t\tList jenkins credentials, default: _"
    echo -e "   generate\t\t\tGenerate jenkins config xml file"
    echo -e "   create <name> <config.xml>\tCreate a jenkins job"
    echo -e "   build <name>\t\t\tBuild a jenkins job"
    echo -e "   log <name>\t\t\tGet a jenkins job log"
    exit -1 
}

# Check if order parameter is defined
if [ $# -lt 1 ]; then
    usage
fi

# Enable verbose mode ?
if [[ $* == *-v* ]]; then
    verbose="true"
else
    verbose="false"
fi

######################################################
# Helpers functions
######################################################
trace() {
    local msg="$1"
    if [ $verbose == "true" ]; then
        echo -e "$cyan$msg$reset"
    fi
}

rawurlencode() {
    local url=$1
    echo $(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$url")
}

get() {
    local url=$1
    echo "$(curl -u $login:$token -s $url)"
}

createItem() {
    local url=$1
    local xml=$2
    local name=$3
    echo "$(curl -X POST -H "Content-Type:application/xml" --data-binary @$xml -u $login:$token -s $url/createItem?name=$name)"
}

status() {
    local url=$1
    echo "$(curl -u $login:$token -s -o /dev/null -I -w '%{http_code}' $url)"
}

red="\033[31m"
reset="\033[0m"
green="\033[32m"
yellow="\033[33m"
cyan="\033[36m"


#####################################
## Display logs TASK
####################################
log() {
    project=$1
    projecturi=$(rawurlencode $project)

    # Get last build on this project, and check if it exists
    lastBuildStatus=$(status "$jenkinsUrl/job/$projecturi/lastBuild/api/json")
    if [ $lastBuildStatus -ne "200" ]; then
        echo -ne $red; echo -e "Project $project not found $reset (Error $lastBuildStatus)"
        exit -1
    else
        trace "Project $project found"
    fi

    echo "$(get $jenkinsUrl/job/$projecturi/lastBuild/consoleText)"
}


#####################################
# BUILD TASK
#####################################

build() {

    project=$1
    projecturi=$(rawurlencode $project) # escape special characters

    echo "Jenkins: BUILD $project"

    # Get last build on this project, and check if it exists
    lastBuildStatus=$(status "$jenkinsUrl/job/$projecturi/lastBuild/api/json")
    if [ $lastBuildStatus -ne "200" ]; then
        echo -ne $red; echo -e "Project $project not found $reset (Error $lastBuildStatus)"
        exit -1
    else
        trace "Project $project found"
    fi

    # Check if the project is not compiling right now
    lastBuildContent=$(get "$jenkinsUrl/job/$projecturi/lastBuild/api/json")
    isBuilding=$(echo $lastBuildContent | jsawk 'return this.building')

    if [ $isBuilding == "true" ]; then 
        echo -ne $red; echo -e "Project is already building. $reset Please retry later"
        exit -1
    fi

    trace "Last build #$(echo $lastBuildContent | jsawk 'return this.number') by $(echo $lastBuildContent | jsawk 'return this.actions[0].causes[0].userName'): $(echo $lastBuildContent | jsawk 'return this.result')"
    trace "Last branch: $(echo $lastBuildContent | jsawk 'return this.actions[1].lastBuiltRevision.branch[0].name')"
    trace ""

    # Launch a new build
    echo "Launching build..."
    result=$(get "$jenkinsUrl/job/$projecturi/build")
    #sleep 4

    stats=$(get "$jenkinsUrl/job/$projecturi/api/json")
    isInQueue=$(echo $stats | jsawk 'return this.inQueue')

    if [ $isInQueue == "true" ]; then
        echo -ne "Build in queue..."
        while [ $isInQueue == "true" ]; do
            sleep 5
            stats=$(get "$jenkinsUrl/job/$projecturi/api/json")
            isInQueue=$(echo $stats | jsawk 'return this.inQueue')
            echo -ne "."
        done;
        echo ""
        echo "Build started"
        trace ""
    fi

    if [ $verbose == "true" ]; then
        sleep 4 # pause for having branch/commit data
    fi;

    # Check if project is building
    build=$(get "$jenkinsUrl/job/$projecturi/lastBuild/api/json")
    isBuilding=$(echo $build | jsawk 'return this.building')

    if [ $isBuilding == "false" ]; then 
        echo -ne $red; echo -e "Project is not building $reset"
        exit -1
    else

        if [ $verbose == "true" ]; then # If not in verbose mode, git data is now available here
            trace "Branch: $(echo $build | jsawk 'return this.actions[1].lastBuiltRevision.branch[0].name')"
            trace "Commit: $(echo $build | jsawk 'return this.actions[1].lastBuiltRevision.branch[0].SHA1') (experimental)"
            trace "Url: $(echo $build | jsawk 'return this.url')"
            trace ""
        fi

        # Wait process finish
        echo -ne "Build in progress..."
        while [ $isBuilding == "true" ]; do
            sleep 5
            build=$(get "$jenkinsUrl/job/$projecturi/lastBuild/api/json")
            isBuilding=$(echo $build | jsawk 'return this.building')
            echo -ne "."
        done;

        result=$(echo $build | jsawk 'return this.result')
        echo ""
        echo -ne "Finished with "

        # Analyse result
        case $result in
            "SUCCESS")
                echo -ne $green; echo -e "SUCCESS $reset"
                ;;
            "FAILURE")
                echo -ne $red; echo -e "FAILURE :'( $reset Croissants !"
                echo ""; echo ""; echo "";

                echo "$(log $project | tail -n 25)"
                echo ""
                echo -e "\033[0;30;47mRun \033[0;34;47mjenkins log $project\033[0;30;47m to see full ouput $reset"
                ;;
            "ABORTED")
                echo -ne $yellow; echo -e "ABORTED $reset"
                ;;
            *)
                echo $result
                ;;
        esac

        exit 0
    fi
}

####################################
## Generate config xml
####################################
generateConfig() {
cat <<EOF
<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.4">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>$repo</url>
        <credentialsId>YOUR GIT REMOTE CREDENTIALS</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$branch</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>
        YOUR SHELL COMMAND
      </command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>
EOF
}

####################################
## List Credential
####################################

credentials() {
    domain=$1
    url=$jenkinsUrl
    hasError=$(status $url"/credential-store/domain/$domain/api/json?depth=1")

    if [ $hasError -ne "200" ]; then
        echo -ne $red; echo -e "FAILURE $cyan $domain $reset not found! $reset"
        exit -1
    fi

    result=$(get $url"/credential-store/domain/$domain/api/json?depth=1")
    forms=$(echo $result | jsawk 'var list=this.credentials;var forms=Object.keys(list).map(function(e){return list[e].displayName+"\\t"+e}).join("\\n"); return forms')
    title=$(echo $result | jsawk 'return this.displayName')
    description=$(echo $result | jsawk 'return this.description')

    echo 
    echo "TITLE:"
    echo $title
    echo 
    echo "DESCRIPTION:"
    echo $description
    echo 
    echo -e "NAME\tKEY\n"$forms | awk '{print $1"\t\t" $2}'| column -t
}

####################################
## Create Job
####################################
create() {
    xml=$2
    if [[ ! -f "$xml" ]]; then
        echo -ne $red; echo -e "FAILURE $cyan $xml $reset not found!"
        exit -1
    fi

    project=$1
    projecturi=$(rawurlencode $project)
    result="$(get $jenkinsUrl/checkJobName?value=$projecturi | grep -o 'already exists')"
    echo "Jenkins: Create job" $project

    if [[ ! -z $result ]]; then
        echo -ne $red; echo -e "FAILURE $reset Project $cyan $project $reset already exists!"
        exit -1
    else
        trace "Upload config.xml"
        ret=$(createItem $jenkinsUrl $xml $projecturi)
        if [[ ! -z "$ret" ]]; then
            echo -ne $red; echo -e "FAILURE $reset create $project error!"
            trace $ret
        fi
        echo -ne $green; echo -e "SUCCESS $reset"
    fi
}

####################################
## MAIN
####################################

if [ $(status $jenkinsUrl/api/json) -ne "200" ]; then
    echo -ne "$red"; echo -ne "Invalid credentials. "; echo -ne $reset; echo "Please double check your login/token"
    echo "Url: $jenkinsUrl"
    echo "Login: $login"
    echo "Token: $token"
    echo "(Debug: try to access curl -u $login:$token $jenkinsUrl/api/json)"
    exit -1
fi;

order=$1

case $order in
    "credentials")
        domain=$2
        if [[ -z "$domain" ]]; then
            domain="_"
        fi
        credentials $domain
        ;;

    "generate")
        generateConfig
        ;;

    "create")
        if [[ -z "$2" ]]; then
            echo -ne $red; echo -e "Project not defined! $reset"
            usage
            exit -1
        elif [[ -z "$3" ]]; then
            echo -ne $red; echo -e "config xml file not defined! $reset"
            usage
            exit -1
        fi
        create $2 $3
        ;;

    "build")
        if [[ -z "$2" ]]; then
            echo -ne $red; echo -e "Project not defined! $reset"
            usage
            exit -1
        fi
        build $2
        ;;

    "list")
        result=$(get $jenkinsUrl/api/json)
        job=$(echo $result | jsawk 'return _(this.jobs).map(function(e) { return e.name+"\\t"+e.color; }).join("\\n")')
        render=$(echo "NAME\tSTATUS\n"$job | sed 's/blue/\\033[32mSUCCESS\\033[0m/g; s/red/\\033[31mERROR\\033[0m/g; s/aborted/\\033[31mABORTED\\033[0m/g; s/notbuilt/NOTBUILT/g; s/yellow/\\033[33mYELLOW\\033[33m/g; s/disabled/DISABLED/g; s/grey/GREY/g')
        echo "JOBS:"
        echo -e $render | awk '{print $1"\t\t" $2}' | column -t
        echo 
        echo "VIEWS:"
        views=$(echo $result | jsawk 'return _(this.views).map(function(e) { return e.name+"\\t"+e.url; }).join("\\n")')
        echo -e "NAME\tURL\n"$views | awk '{print $1"\t\t" $2}' | column -t
        ;;

    "log")
        if [[ -z "$2" ]]; then
            echo -ne $red; echo -e "Project not defined! $reset"
            usage
            exit -1
        fi
        log $2
        ;;

    *)
        usage
        ;;
esac

exit 0
